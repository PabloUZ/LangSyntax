{
    "CPP_basic_template": {
        "scope": "cpp",
        "prefix": "cpp-basic",
        "body": [
            "#include <iostream>",
            "",
            "// Otras librerias",
            "",
            "using namespace std;",
            "",
            "// Declarar funciones:",
            "// <Tipo de dato> <nombre>(<Param1>, <Param2>, ...);",
            "",
            "int main() {",
            "\t$0",
            "}",
            "",
            "// Definir funciones:",
            "// <Tipo de dato> <nombre>(<Param1>, <Param2>, ...){}"
        ],
        "description": "Estructura basica C++"
    },
    "CPP_variables": {
        "scope": "cpp",
        "prefix": "cpp-var",
        "body": "${1:/*tipo de dato*/} ${2:/*nombre*/} = ${3:/*valor*/};",
        "description": "Estructura de variable."
    },
    "CPP_conditional_operator": {
        "scope": "cpp",
        "prefix": "cpp-operador_ternario",
        "body": "(${1:/*Condicion (valor booleano)*/} ? ${2:/*es verdadero*/} : ${3:/*es falso*/});",
        "description": "Estructura del operador ternario."
    },
    "CPP_if_conditional": {
        "scope": "cpp",
        "prefix": "cpp-if",
        "body": [
            "if (${1:/*Condicion (valor booleano)*/}) {",
            "\t${2:/*Instrucciones a ejecutar si la condicion es verdadera*/}",
            "}",
            "else if (${3:/*Condicion (valor booleano)*/}) {",
            "\t${4:/*Instrucciones a ejecutar si la condicion inmediatamente anterior es falsa y la actual es verdadera*/}",
            "}",
            "else {",
            "\t${5:/*Instrucciones a ejecutar si ninguna de las condiciones anteriores se cumplieron*/}",
            "}"
        ],
        "description": "Estructura del condicional if."
    },
    "CPP_while_loop": {
        "scope": "cpp",
        "prefix": "cpp-while",
        "body": [
            "while (${1:/*Condicion (valor booleano)*/}) {",
            "\t${2:/*Instrucciones a ejecutar y repetir mientras la condicion sea verdadera*/}",
            "}"
        ],
        "description": "Estructura del ciclo while."
    },
    "CPP_do_while_loop": {
        "scope": "cpp",
        "prefix": "cpp-do_while",
        "body": [
            "do {",
            "\t${2:/*Instrucciones a ejecutar y repetir mientras la condicion sea verdadera*/}",
            "} while (${1:/*Condicion (valor booleano)*/});",
        ],
        "description": "Estructura del ciclo Do-While."
    },
    "CPP_for_loop": {
        "scope": "cpp",
        "prefix": "cpp-for",
        "body": [
            "for (${1:/*Declaracion de variable iteradora*/}; ${2:/*Condicion (valor booleano)*/}; ${3:/*Modificacion del iterador*/}) {",
            "\t${4:/*Instrucciones a ejecutar y repetir mientras la condicion sea verdadera*/}",
            "}"
        ],
        "description": "Estructura del ciclo For."
    },
    "CPP_array": {
        "scope": "cpp",
        "prefix": "cpp-arreglo",
        "body": "${1:/*tipo de dato*/} ${2:/*nombre*/}[${3:/*tama√±o*/}] = {${4:/*Elemento1*/},${5:/*Elemento2...*/}};",
        "description": "Estructura del Arreglo."
    },
    "CPP_function": {
        "scope": "cpp",
        "prefix": "cpp-funcion",
        "body": [
            "${1:/*tipo de dato*/} ${2:/*nombre*/}(${3:/*parametros (<tipo de dato> <nombre>, ...)*/}){",
            "\t${4:/*Instrucciones a ejecutar*/}",
            "\t${5:return ;}// Borrar esta linea si la funcion es 'void'",
            "}"
        ],
        "description": "Estructura de la funcion."
    },
}